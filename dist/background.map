{"version":3,"sources":["utils.js","background.js"],"names":["makeExtensionLogger","ext","mod","log","args","console","apply","undefined","join","err","onError","e","makeLogger","bind","makeGetHostname","parser","document","createElement","getHostname","url","href","hostname","noop","util","blocked","domain","recordBlocked","push","browser","storage","local","set","then","setDomain","val","addEventListener","tabs","query","active","currentWindow","status","windowType","map","tab","Promise","all","fetch","res","text","sync","get","userblocklist","split","getCurrent","blocklist","list","concat","filter","Boolean","handleBeforeRequest","request","trim","length","indexOf","cancel","webRequest","onBeforeRequest","addListener","urls","catch"],"mappings":"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","file":"background.map","sourceRoot":"..","sourcesContent":["const makeExtensionLogger = (ext = '', mod = '') => {\n  const log = (...args) =>\n    console.log.apply(undefined, [[ext, mod].join('-'), ...args]);\n  const err = (...args) => log(`Error: `, args);\n  const onError = e => err(e);\n\n  return {\n    log,\n    err,\n    onError\n  };\n};\n\nexport const makeLogger = makeExtensionLogger.bind(undefined, 'DDG');\n\nconst makeGetHostname = () => {\n  let parser = document.createElement('a');\n  const getHostname = url => {\n    parser.href = url;\n    return parser.hostname;\n  };\n  return getHostname;\n};\n\nexport const getHostname = makeGetHostname();\n\nexport const noop = () => undefined;\n\nconst util = {\n  noop,\n  makeLogger,\n  getHostname\n};\n\nexport { util as default };\n","import { makeLogger, getHostname, noop } from './utils';\nconst { log, onError } = makeLogger('BKG');\n\nlet blocked = {};\nlet domain = '';\nconst recordBlocked = hostname => {\n  if (typeof blocked[domain] === 'undefined') {\n    blocked[domain] = [];\n  }\n  blocked[domain].push(hostname);\n  browser.storage.local\n    .set({\n      blocked\n    })\n    .then(noop, onError);\n};\nconst setDomain = val => {\n  domain = val;\n};\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  browser.tabs.query(\n    {\n      active: true,\n      currentWindow: true,\n      status: 'complete',\n      windowType: 'normal'\n    },\n    tabs => setDomain(getHostname(tabs.map(tab => tab.url)[0]))\n  );\n});\n\nPromise.all([\n  fetch('./../BLOCKLIST').then(res => res.text()),\n  browser.storage.sync\n    .get('userblocklist')\n    .then(res => (res.userblocklist ? res.userblocklist.split('\\n') : [])),\n  browser.tabs.getCurrent().then(() => null)\n])\n  .then(([blocklist, userblocklist]) => {\n    log(userblocklist);\n    const list = blocklist\n      .split('\\n')\n      .concat(userblocklist)\n      .filter(Boolean);\n    const handleBeforeRequest = request => {\n      const hostname = getHostname(request.url);\n      if (hostname.trim().length > 0 && list.indexOf(hostname) > -1) {\n        log(`BLOCKED: ${hostname}`);\n        recordBlocked(hostname);\n        return {\n          cancel: true\n        };\n      }\n    };\n\n    browser.webRequest.onBeforeRequest.addListener(\n      handleBeforeRequest,\n      {\n        urls: ['<all_urls>']\n      },\n      ['blocking']\n    );\n  })\n  .catch(onError);\n"]}