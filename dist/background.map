{"version":3,"sources":["utils.js","background.js"],"names":["makeExtensionLogger","ext","mod","log","args","console","apply","undefined","join","err","onError","e","makeLogger","bind","makeGetHostname","parser","document","createElement","getHostname","url","href","hostname","noop","xor","arr","val","arrClone","slice","index","indexOf","splice","concat","getActiveTabDomain","Promise","resolve","browser","tabs","query","active","currentWindow","windowType","map","tab","util","recordBlocked","domain","storage","sync","get","then","blocked","push","set","all","fetch","res","text","userblocklist","length","split","blocklist","list","filter","Boolean","webRequest","onBeforeRequest","addListener","request","disabled","trim","cancel","urls","catch"],"mappings":";AAsDA,aAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,EAAA,QAAA,QAAA,QAAA,IAAA,QAAA,KAAA,QAAA,YAAA,QAAA,gBAAA,EAtDA,IAAMA,EAAsB,WAACC,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIC,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACrCC,EAAM,WAAIC,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAJ,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAIA,EAAJ,GAAA,UAAA,GACVC,OAAAA,QAAQF,IAAIG,WAAMC,EAAY,CAAA,CAACN,EAAKC,GAAKM,KAAK,MAASJ,OAAAA,KACnDK,EAAM,WAAIL,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAJ,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAIA,EAAJ,GAAA,UAAA,GAAaD,OAAAA,EAAeC,UAAAA,IAGjC,MAAA,CACLD,IAAAA,EACAM,IAAAA,EACAC,QALc,SAAAC,GAAKF,OAAAA,EAAIE,MASdC,EAAaZ,EAAoBa,UAAKN,EAAW,OAyC9D,QAAA,WAAA,EAvCA,IAAMO,EAAkB,WAClBC,IAAAA,EAASC,SAASC,cAAc,KAK7BC,OAJa,SAAAC,GAEXJ,OADPA,EAAOK,KAAOD,EACPJ,EAAOM,WAKLH,EAAcJ,IA8B3B,QAAA,YAAA,EA5BO,IAAMQ,EAAO,aA4BpB,QAAA,KAAA,EA1BO,IAAMC,EAAM,SAACC,EAAKC,GACjBC,IAAAA,EAAWF,EAAIG,MAAM,GACrBC,EAAQF,EAASG,QAAQJ,GAC3BG,OAAAA,GAAS,GACXF,EAASI,OAAOF,EAAO,GAChBF,GAEFA,EAASK,OAAO,CAACN,KAGnB,SAASO,IACP,OAAA,IAAIC,QAAQ,SAAAC,GACjBC,QAAQC,KAAKC,MACX,CACEC,QAAQ,EACRC,eAAe,EACfC,WAAY,UAEd,SAAAJ,GACgBA,IAAPjB,EADD,EACQiB,EAAKK,IAAI,SAAAC,GAAOA,OAAAA,EAAIvB,MAD5B,GAAA,GAENe,EAAQhB,EAAYC,QAM5B,QAAA,IAAA,EAAA,IAAMwB,EAAO,CACXpB,IAAAA,EACAD,KAAAA,EACAV,WAAAA,EACAM,YAAAA,EACAc,mBAAAA,GALF,QAAA,QAAA;;AClCA,aApBA,IAAA,EAAA,QAAA,WAoBA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAnByB,IAAA,GAAA,EAAW,EAAA,YAAA,OAA5B7B,EAAAA,EAAAA,IAAKO,EAAAA,EAAAA,QAEPkC,EAAgB,SAACC,EAAQxB,GAC7Bc,QAAQW,QAAQC,KACbC,IAAI,WACJC,KAAK,SAAA,GAAGC,IAAAA,EAAAA,EAAAA,QAAmBA,YAAT,IAAA,EAAA,GAAb,IACLD,KAAK,SAAAC,QAC2B,IAApBA,EAAQL,KACjBK,EAAQL,GAAU,IAEpBK,EAAQL,GAAQM,KAAK9B,GACrBc,QAAQW,QAAQC,KACbK,IAAI,CACHF,QAAAA,IAEDD,KAAK3B,EAJR,KAIcZ,MAIpBuB,QAAQoB,IAAI,CACVC,MAAM,kBAAkBL,KAAK,SAAAM,GAAOA,OAAAA,EAAIC,SACxCrB,QAAQW,QAAQC,KACbC,IAAI,iBACJC,KAAK,SAAA,GAAGQ,IAAAA,EAAAA,EAAAA,cAAAA,OAAgB,IAAA,EAAA,GAAnB,EACJA,OAAAA,EAAcC,OAAS,EAAID,EAAcE,MAAM,MAAQ,OAG1DV,KAAK,SAAgC,GAAA,IAAA,EAAA,EAAA,EAAA,GAA9BW,EAA8B,EAAA,GAAnBH,EAAmB,EAAA,GAC9BI,EAAOD,EACVD,MAAM,MACN5B,OAAO0B,GACPK,OAAOC,SAuBV5B,QAAQ6B,WAAWC,gBAAgBC,YAtBP,SAAAC,GACpB9C,IAAAA,GAAW,EAAY8C,EAAAA,aAAAA,EAAQhD,KAErCc,QAAQoB,IAAI,EACV,EADU,EAAA,sBAEVlB,QAAQW,QAAQC,KAAKC,IAAI,YAAYC,KAAK,SAAuB,GAApBmB,IAAAA,EAAAA,EAAAA,SACpCA,YAD+C,IAAA,EAAA,GAAS,MAGhEnB,KAAK,SAAwB,GAAA,IAAA,EAAA,EAAA,EAAA,GAAtBJ,EAAsB,EAAA,GAC1BuB,KAD0B,EAAA,GACjBvC,QAAQgB,IAAW,GAG5BxB,OAAAA,EAASgD,OAAOX,OAAS,GAAKG,EAAKhC,QAAQR,IAAa,GAC1DlB,EAAgBkB,YAAAA,OAAAA,IAChBuB,EAAcC,EAAQxB,GACf,CACLiD,QAAQ,SAJRjD,IAOHX,SAKH,CACE6D,KAAM,CAAC,eAET,CAAC,eAGJC,MAAM9D","file":"background.map","sourceRoot":"..","sourcesContent":["const makeExtensionLogger = (ext = '', mod = '') => {\n  const log = (...args) =>\n    console.log.apply(undefined, [[ext, mod].join('-'), ...args]);\n  const err = (...args) => log(`Error: `, args);\n  const onError = e => err(e);\n\n  return {\n    log,\n    err,\n    onError\n  };\n};\n\nexport const makeLogger = makeExtensionLogger.bind(undefined, 'DDG');\n\nconst makeGetHostname = () => {\n  let parser = document.createElement('a');\n  const getHostname = url => {\n    parser.href = url;\n    return parser.hostname;\n  };\n  return getHostname;\n};\n\nexport const getHostname = makeGetHostname();\n\nexport const noop = () => undefined;\n\nexport const xor = (arr, val) => {\n  const arrClone = arr.slice(0);\n  const index = arrClone.indexOf(val);\n  if (index >= 0) {\n    arrClone.splice(index, 1);\n    return arrClone;\n  }\n  return arrClone.concat([val]);\n};\n\nexport function getActiveTabDomain() {\n  return new Promise(resolve => {\n    browser.tabs.query(\n      {\n        active: true,\n        currentWindow: true,\n        windowType: 'normal'\n      },\n      tabs => {\n        const [url] = tabs.map(tab => tab.url);\n        resolve(getHostname(url));\n      }\n    );\n  });\n}\n\nconst util = {\n  xor,\n  noop,\n  makeLogger,\n  getHostname,\n  getActiveTabDomain\n};\n\nexport { util as default };\n","import { makeLogger, getHostname, noop, getActiveTabDomain } from './utils';\nconst { log, onError } = makeLogger('BKG');\n\nconst recordBlocked = (domain, hostname) => {\n  browser.storage.sync\n    .get('blocked')\n    .then(({ blocked = {} }) => blocked)\n    .then(blocked => {\n      if (typeof blocked[domain] === 'undefined') {\n        blocked[domain] = [];\n      }\n      blocked[domain].push(hostname);\n      browser.storage.sync\n        .set({\n          blocked\n        })\n        .then(noop, onError);\n    });\n};\n\nPromise.all([\n  fetch('./../BLOCKLIST').then(res => res.text()),\n  browser.storage.sync\n    .get('userblocklist')\n    .then(({ userblocklist = '' }) =>\n      userblocklist.length > 0 ? userblocklist.split('\\n') : []\n    )\n])\n  .then(([blocklist, userblocklist]) => {\n    const list = blocklist\n      .split('\\n')\n      .concat(userblocklist)\n      .filter(Boolean);\n    const handleBeforeRequest = request => {\n      const hostname = getHostname(request.url);\n\n      Promise.all([\n        getActiveTabDomain(),\n        browser.storage.sync.get('disabled').then(({ disabled = [] }) => {\n          return disabled;\n        })\n      ]).then(([domain, disabled]) => {\n        if (disabled.indexOf(domain) >= 0) {\n          return;\n        }\n        if (hostname.trim().length > 0 && list.indexOf(hostname) >= 0) {\n          log(`BLOCKED: ${hostname}`);\n          recordBlocked(domain, hostname);\n          return {\n            cancel: true\n          };\n        }\n      }).onError;\n    };\n\n    browser.webRequest.onBeforeRequest.addListener(\n      handleBeforeRequest,\n      {\n        urls: ['<all_urls>']\n      },\n      ['blocking']\n    );\n  })\n  .catch(onError);\n"]}