{"version":3,"sources":["utils.js","main.js"],"names":["makeExtensionLogger","ext","mod","log","args","console","apply","undefined","join","err","onError","e","makeLogger","bind","makeGetHostname","parser","document","createElement","getHostname","url","href","hostname","noop","util","browser","runtime","onMessage","addListener","request","Promise","resolve","response"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAwB;AAAA,MAAvBC,GAAuB,uEAAjB,EAAiB;AAAA,MAAbC,GAAa,uEAAP,EAAO;;AAClD,MAAMC,GAAG,GAAG,SAANA,GAAM;AAAA,sCAAIC,IAAJ;AAAIA,MAAAA,IAAJ;AAAA;;AAAA,WACVC,OAAO,CAACF,GAAR,CAAYG,KAAZ,CAAkBC,SAAlB,GAA8B,CAACN,GAAD,EAAMC,GAAN,EAAWM,IAAX,CAAgB,GAAhB,CAA9B,SAAuDJ,IAAvD,EADU;AAAA,GAAZ;;AAEA,MAAMK,GAAG,GAAG,SAANA,GAAM;AAAA,uCAAIL,IAAJ;AAAIA,MAAAA,IAAJ;AAAA;;AAAA,WAAaD,GAAG,YAAYC,IAAZ,CAAhB;AAAA,GAAZ;;AACA,MAAMM,OAAO,GAAG,SAAVA,OAAU,CAAAC,CAAC;AAAA,WAAIF,GAAG,CAACE,CAAD,CAAP;AAAA,GAAjB;;AAEA,SAAO;AACLR,IAAAA,GAAG,EAAHA,GADK;AAELM,IAAAA,GAAG,EAAHA,GAFK;AAGLC,IAAAA,OAAO,EAAPA;AAHK,GAAP;AAKD,CAXD;;AAaO,IAAME,UAAU,GAAGZ,mBAAmB,CAACa,IAApB,CAAyBN,SAAzB,EAAoC,KAApC,CAAnB;;;AAEP,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,MAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAb;;AACA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,GAAG,EAAI;AACzBJ,IAAAA,MAAM,CAACK,IAAP,GAAcD,GAAd;AACA,WAAOJ,MAAM,CAACM,QAAd;AACD,GAHD;;AAIA,SAAOH,WAAP;AACD,CAPD;;AASO,IAAMA,WAAW,GAAGJ,eAAe,EAAnC;;;AAEA,IAAMQ,IAAI,GAAG,SAAPA,IAAO;AAAA,SAAMf,SAAN;AAAA,CAAb;;;AAEP,IAAMgB,IAAI,GAAG;AACXD,EAAAA,IAAI,EAAJA,IADW;AAEXV,EAAAA,UAAU,EAAVA,UAFW;AAGXM,EAAAA,WAAW,EAAXA;AAHW,CAAb;;;;;AC5BA;;kBACgB,uBAAW,KAAX;IAARf,kBAAAA;;AAERqB,OAAO,CAACC,OAAR,CAAgBC,SAAhB,CAA0BC,WAA1B,CAAsC,UAAAC,OAAO,EAAI;AAC/CzB,EAAAA,GAAG,CAAC,mBAAD,CAAH;AACA,SAAO0B,OAAO,CAACC,OAAR,CAAgB;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAhB,CAAP;AACD,CAHD","file":"main.map","sourceRoot":"..","sourcesContent":["const makeExtensionLogger = (ext = '', mod = '') => {\n  const log = (...args) =>\n    console.log.apply(undefined, [[ext, mod].join('-'), ...args]);\n  const err = (...args) => log(`Error: `, args);\n  const onError = e => err(e);\n\n  return {\n    log,\n    err,\n    onError\n  };\n};\n\nexport const makeLogger = makeExtensionLogger.bind(undefined, 'DDG');\n\nconst makeGetHostname = () => {\n  let parser = document.createElement('a');\n  const getHostname = url => {\n    parser.href = url;\n    return parser.hostname;\n  };\n  return getHostname;\n};\n\nexport const getHostname = makeGetHostname();\n\nexport const noop = () => undefined;\n\nconst util = {\n  noop,\n  makeLogger,\n  getHostname\n};\n\nexport { util as default };\n","import { makeLogger } from './utils';\nconst { log } = makeLogger('CON');\n\nbrowser.runtime.onMessage.addListener(request => {\n  log('Message received.');\n  return Promise.resolve({ response: 'Received in content script.' });\n});\n"]}